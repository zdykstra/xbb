#!/bin/bash
# vim: softtabstop=2 shiftwidth=2 expandtab

usage() {
  cat <<EOF
Usage: $0 [options] <package> [packages...]
  -b    Switch to this branch, instead of \$package-\$version
  -n    Skip package checks
  -K    Perform more extensive tests
  -i    Install package after building
EOF
}

REPO_BASE="$(xdistdir)" || exit
UB="upstream"
CORES="$( nproc )"

CONF="${HOME}/.config/build-bump.conf"

# shellcheck disable=SC1090
[ -f "${CONF}" ] && source "${CONF}"

while getopts "b:BKnih" opt; do
  case "${opt}" in
    b)
      branch="${OPTARG}"
      ;;
    K)
      fullcheck=1
      ;;
    n)
      nocheck=1
      ;;
    i)
      install=1
      ;;
    \?|h)
      usage
      exit
      ;;
    *)
      usage
      exit
      ;;
  esac
done

while [ "${OPTIND}" -gt 1 ]; do
  shift
  OPTIND="$((OPTIND - 1))"
done

# At least one package is required
if [ "$#" -lt 1 ]; then
  usage
  exit 1
fi

# Determine the level of checks to run
if ((fullcheck)); then
  PKGCHECK="-K"
elif ((nocheck)); then
  PKGCHECK=""
else
  PKGCHECK="-Q"
fi

cd "${REPO_BASE}" || exit

# Make sure master is up-to-date with upstream
(
  git checkout master
  git fetch "${UB}" && git merge "${UB}/master" && git push origin master
) > /dev/null 2>&1

# If a branch is specified, switch to it
if [ -n "${branch}" ]; then
  git checkout "${branch}" || exit
fi

while [ "$#" -gt 0 ]; do
  package="$1"
  shift

  current=
  new=

  # Loop through all found versions, use the last
  while read -r c _ n ; do
    if [ -z "${c}" ]; then
      echo "No updates for ${package}"
      exit
    fi
    current="${c}"
    new="${n}"
  done <<<"$( ./xbps-src update-check "${package}" )"

  current=${current/#${package}-/}
  new=${new/#${package}-/}
  template="srcpkgs/${package}/template"

  echo "Updating ${package} from ${current} to ${new}"

  if [ -z "${branch}" ]; then
    git checkout -b "${package}-${new}" || exit
  fi

  # Update the version, reset revision
  sed -e "s/version=${current}/version=${new}/"\
      -e "s/revision=.*/revision=1/"\
      -i "${template}"

  xgensum -f -i "${template}" || exit

  xlint "${template}" || exit

  "${REPO_BASE}/xbps-src" pkg ${PKGCHECK} -j "${CORES}" "${package}" || exit

  if ((install)); then
    xi "${package}"
    read -n 1 -s -r -p "Test the package, press any key to continue"
  fi

  xbump "${package}"

  if [ -z "${branch}" ]; then
    git push --set-upstream origin "${package}-${new}"
  fi
done
